/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package editor.bdhc;

import editor.game.Game;
import editor.handler.MapEditorHandler;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.text.DecimalFormat;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.filechooser.FileNameExtensionFilter;

import utils.Utils;

/**
 * @author Trifindo
 */
public class BdhcEditorDialog extends javax.swing.JDialog {

    private MapEditorHandler handler;
    private BdhcHandler bdhcHandler;

    private boolean plateListEnabled = true;
    private MutableBoolean jtfCoordZEnabled = new MutableBoolean(true);
    private MutableBoolean jtfAngleXEnabled = new MutableBoolean(true);
    private MutableBoolean jtfAngleYEnabled = new MutableBoolean(true);
    private boolean jcbTypeEnabled = true;

    private static final Color redColor = new Color(255, 200, 200);
    private static final Color greenColor = new Color(200, 255, 200);
    private static final Color whiteColor = Color.white;

    /**
     * Creates new form BdhcEditorDialog
     */
    public BdhcEditorDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();

        addListenerToJTextField(jtfCoordZ, jtfCoordZEnabled);
        addListenerToJTextField(jtfAngleX, jtfAngleXEnabled);
        addListenerToJTextField(jtfAngleY, jtfAngleYEnabled);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        plateList = new javax.swing.JList<>();
        jbAddPlate = new javax.swing.JButton();
        jbRemovePlate = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jtfCoordZ = new JTextField();
        jbCoordinateZ = new javax.swing.JButton();
        jcbType = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        angleDisplay1 = new AngleDisplay();
        angleDisplay2 = new AngleDisplay();
        jtfAngleX = new JTextField();
        jtfAngleY = new JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jbApplyAngleX = new javax.swing.JButton();
        jbApplyAngleY = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        displayContainer = new javax.swing.JPanel();
        bdhcDisplay = new BdhcDisplay();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("BDHC Editor");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Plates"));

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        plateList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                plateListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(plateList);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jbAddPlate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/AddIcon.png"))); // NOI18N
        jbAddPlate.setText("Add Plate");
        jbAddPlate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAddPlateActionPerformed(evt);
            }
        });

        jbRemovePlate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/RemoveIcon.png"))); // NOI18N
        jbRemovePlate.setText("Remove Plate");
        jbRemovePlate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbRemovePlateActionPerformed(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Plate Info"));

        jLabel2.setForeground(new Color(0, 0, 204));
        jLabel2.setText("Z Coordinate: ");

        jtfCoordZ.setText(" ");
        jtfCoordZ.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jtfCoordZFocusGained(evt);
            }
        });

        jbCoordinateZ.setText("Apply");
        jbCoordinateZ.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCoordinateZActionPerformed(evt);
            }
        });

        jcbType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[]{"PLANE", "BRIDGE (DP ONLY)", "STAIRS LEFT (-X)", "STAIRS RIGHT (+X)", "STAIRS UP (-Y)", "STAIRS DOWN (+Y)", "OTHER"}));
        jcbType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbTypeActionPerformed(evt);
            }
        });

        jLabel5.setText("Type: ");

        angleDisplay1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        angleDisplay1.setToolTipText("");
        angleDisplay1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                angleDisplay1MousePressed(evt);
            }
        });

        javax.swing.GroupLayout angleDisplay1Layout = new javax.swing.GroupLayout(angleDisplay1);
        angleDisplay1.setLayout(angleDisplay1Layout);
        angleDisplay1Layout.setHorizontalGroup(
                angleDisplay1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 58, Short.MAX_VALUE)
        );
        angleDisplay1Layout.setVerticalGroup(
                angleDisplay1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 58, Short.MAX_VALUE)
        );

        angleDisplay2.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        angleDisplay2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                angleDisplay2MousePressed(evt);
            }
        });

        javax.swing.GroupLayout angleDisplay2Layout = new javax.swing.GroupLayout(angleDisplay2);
        angleDisplay2.setLayout(angleDisplay2Layout);
        angleDisplay2Layout.setHorizontalGroup(
                angleDisplay2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 58, Short.MAX_VALUE)
        );
        angleDisplay2Layout.setVerticalGroup(
                angleDisplay2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 58, Short.MAX_VALUE)
        );

        jtfAngleX.setText(" ");
        jtfAngleX.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jtfAngleXFocusGained(evt);
            }

            public void focusLost(java.awt.event.FocusEvent evt) {
                jtfAngleXFocusLost(evt);
            }
        });

        jtfAngleY.setText(" ");
        jtfAngleY.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jtfAngleYFocusGained(evt);
            }

            public void focusLost(java.awt.event.FocusEvent evt) {
                jtfAngleYFocusLost(evt);
            }
        });

        jLabel6.setForeground(new Color(0, 153, 0));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("Angle Y");

        jLabel7.setForeground(new Color(204, 0, 0));
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("Angle X");

        jbApplyAngleX.setText("Apply");
        jbApplyAngleX.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbApplyAngleXActionPerformed(evt);
            }
        });

        jbApplyAngleY.setText("Apply");
        jbApplyAngleY.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbApplyAngleYActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
                jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel2Layout.createSequentialGroup()
                                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(jcbType, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addGroup(jPanel2Layout.createSequentialGroup()
                                                                .addComponent(jtfCoordZ, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(jbCoordinateZ)
                                                                .addGap(0, 5, Short.MAX_VALUE))))
                                        .addGroup(jPanel2Layout.createSequentialGroup()
                                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                        .addComponent(jbApplyAngleX, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(jtfAngleX, javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(angleDisplay1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 86, Short.MAX_VALUE)
                                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                        .addComponent(angleDisplay2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(jtfAngleY)
                                                        .addComponent(jbApplyAngleY, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
                jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel2)
                                        .addComponent(jtfCoordZ, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jbCoordinateZ))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jcbType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel5))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel6)
                                        .addComponent(jLabel7))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(angleDisplay1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(angleDisplay2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jtfAngleX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jtfAngleY, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jbApplyAngleX)
                                        .addComponent(jbApplyAngleY))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/ExportIcon.png"))); // NOI18N
        jButton1.setText("Export");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/ImportTileIcon.png"))); // NOI18N
        jButton2.setText("Import");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        displayContainer.setMinimumSize(new Dimension(512, 512));
        displayContainer.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                displayContainerComponentResized(evt);
            }
        });
        displayContainer.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 0, 0));

        bdhcDisplay.setBorder(javax.swing.BorderFactory.createLineBorder(new Color(0, 0, 0)));

        javax.swing.GroupLayout bdhcDisplayLayout = new javax.swing.GroupLayout(bdhcDisplay);
        bdhcDisplay.setLayout(bdhcDisplayLayout);
        bdhcDisplayLayout.setHorizontalGroup(
                bdhcDisplayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 510, Short.MAX_VALUE)
        );
        bdhcDisplayLayout.setVerticalGroup(
                bdhcDisplayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 510, Short.MAX_VALUE)
        );

        displayContainer.add(bdhcDisplay);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(displayContainer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addComponent(jbAddPlate, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(jbRemovePlate))
                                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addContainerGap())
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(displayContainer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(jbAddPlate)
                                                        .addComponent(jbRemovePlate))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(jButton2)
                                                        .addComponent(jButton1))))
                                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbAddPlateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAddPlateActionPerformed
        bdhcHandler.addPlate();
        bdhcHandler.setSelectedPlate(bdhcHandler.getPlates().size() - 1);

        updateViewPlateNames();
        repaint();
    }//GEN-LAST:event_jbAddPlateActionPerformed

    private void jbRemovePlateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbRemovePlateActionPerformed
        if (bdhcHandler.getPlates().size() > 1) {
            bdhcHandler.removeSelectedPlate();

            updateViewPlateNames();
            repaint();
        }
    }//GEN-LAST:event_jbRemovePlateActionPerformed

    private void plateListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_plateListValueChanged
        if (plateListEnabled) {
            bdhcHandler.setSelectedPlate(plateList.getSelectedIndex());
            updateView();
            bdhcDisplay.repaint();
        }
    }//GEN-LAST:event_plateListValueChanged

    private void jbCoordinateZActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbCoordinateZActionPerformed
        changeCoordZ();
    }//GEN-LAST:event_jbCoordinateZActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        saveBdhcWithDialog();
        /*
        try {
            int game = handler.getGameIndex();
            if (game == Game.DIAMOND || game == Game.PEARL) {
                BdhcWriterDP.writeBdhc(bdhcHandler.getBdhc(), "pruebaBdhc.bdhc");
            } else {
                BdhcWriterHGSS.writeBdhc(bdhcHandler.getBdhc(), "pruebaBdhc.bdhc");
            }
        } catch (IOException ex) {
            Logger.getLogger(BdhcEditorDialog.class.getName()).log(Level.SEVERE, null, ex);
        }
         */
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jcbTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbTypeActionPerformed
        if (jcbTypeEnabled) {
            bdhcHandler.getSelectedPlate().type = jcbType.getSelectedIndex();
            bdhcDisplay.repaint();
            updateViewSlopes();
            updateViewAngles();
        }

    }//GEN-LAST:event_jcbTypeActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        openBdhcWithDialog();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jbApplyAngleXActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbApplyAngleXActionPerformed
        float value;
        try {
            value = Float.parseFloat(removeCharAtEnd(jtfAngleX.getText().replace(',', '.'), "º"));
            float max = 80.0f;
            float min = -80.0f;
            if (value > max) {
                value = max;
            } else if (value < min) {
                value = min;
            }
        } catch (NumberFormatException e) {
            value = 0.0f;
        }
        jtfAngleXEnabled.value = false;
        jtfAngleX.setText(String.valueOf(value));
        jtfAngleX.setBackground(greenColor);
        jtfAngleXEnabled.value = true;

        if (value != 0.0f) {
            jtfAngleYEnabled.value = false;
            jtfAngleY.setText(String.valueOf(0.0f));
            jtfAngleY.setBackground(greenColor);
            jtfAngleYEnabled.value = true;
        }

        bdhcHandler.getSelectedPlate().setAngleX((float) ((value / 180.0f) * Math.PI));

        updateViewAngles();
        updateViewSlopes();
        updateViewType();
        bdhcDisplay.repaint();
    }//GEN-LAST:event_jbApplyAngleXActionPerformed

    private void jbApplyAngleYActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbApplyAngleYActionPerformed
        float value;
        try {
            value = Float.parseFloat(removeCharAtEnd(jtfAngleY.getText().replace(',', '.'), "º"));
            float max = 80.0f;
            float min = -80.0f;
            if (value > max) {
                value = max;
            } else if (value < min) {
                value = min;
            }
        } catch (NumberFormatException e) {
            value = 0.0f;
        }
        jtfAngleYEnabled.value = false;
        jtfAngleY.setText(String.valueOf(value));
        jtfAngleY.setBackground(greenColor);
        jtfAngleYEnabled.value = true;

        if (value != 0.0f) {
            jtfAngleXEnabled.value = false;
            jtfAngleX.setText(String.valueOf(0.0f));
            jtfAngleX.setBackground(greenColor);
            jtfAngleXEnabled.value = true;
        }

        bdhcHandler.getSelectedPlate().setAngleY((float) ((value / 180.0f) * Math.PI));

        updateViewAngles();
        updateViewSlopes();
        updateViewType();
        bdhcDisplay.repaint();
    }//GEN-LAST:event_jbApplyAngleYActionPerformed

    private void jtfAngleXFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtfAngleXFocusGained
        jtfAngleXEnabled.value = false;
        jtfAngleX.setText(removeCharAtEnd(jtfAngleX.getText(), "º"));
        jtfAngleX.selectAll();
        jtfAngleXEnabled.value = true;
    }//GEN-LAST:event_jtfAngleXFocusGained

    private void jtfAngleYFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtfAngleYFocusGained
        jtfAngleYEnabled.value = false;
        jtfAngleY.setText(removeCharAtEnd(jtfAngleY.getText(), "º"));
        jtfAngleY.selectAll();
        jtfAngleYEnabled.value = true;
    }//GEN-LAST:event_jtfAngleYFocusGained

    private void jtfAngleXFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtfAngleXFocusLost
        jtfAngleXEnabled.value = false;
        jtfAngleX.setText(addCharAtEnd(jtfAngleX.getText(), "º"));
        jtfAngleXEnabled.value = true;
    }//GEN-LAST:event_jtfAngleXFocusLost

    private void jtfAngleYFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtfAngleYFocusLost
        jtfAngleYEnabled.value = false;
        jtfAngleY.setText(addCharAtEnd(jtfAngleY.getText(), "º"));
        jtfAngleYEnabled.value = true;
    }//GEN-LAST:event_jtfAngleYFocusLost

    private void jtfCoordZFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtfCoordZFocusGained
        jtfCoordZ.selectAll();
    }//GEN-LAST:event_jtfCoordZFocusGained

    private void angleDisplay1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_angleDisplay1MousePressed
        Plate plate = bdhcHandler.getSelectedPlate();

        final AngleCalculatorDialog dialog = new AngleCalculatorDialog(handler.getMainFrame(), plate.getAngleDegreesX(), plate.width);
        dialog.setLocationRelativeTo(handler.getMainFrame());
        dialog.setVisible(true);

        if (dialog.getReturnValue() == AngleCalculatorDialog.ACCEPTED) {
            float angle = dialog.getAngle();
            float max = 80.0f;
            float min = -80.0f;
            if (angle > max) {
                angle = max;
            } else if (angle < min) {
                angle = min;
            }

            jtfAngleXEnabled.value = false;
            jtfAngleX.setText(String.valueOf(angle));
            jtfAngleXEnabled.value = true;

            if (angle != 0.0f) {
                jtfAngleYEnabled.value = false;
                jtfAngleY.setText(String.valueOf(0.0f));
                jtfAngleYEnabled.value = true;
            }

            bdhcHandler.getSelectedPlate().setAngleX((float) ((angle / 180.0f) * Math.PI));

            updateViewAngles();
            updateViewSlopes();
            updateViewType();
            bdhcDisplay.repaint();
        }

    }//GEN-LAST:event_angleDisplay1MousePressed

    private void angleDisplay2MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_angleDisplay2MousePressed
        Plate plate = bdhcHandler.getSelectedPlate();

        final AngleCalculatorDialog dialog = new AngleCalculatorDialog(handler.getMainFrame(), plate.getAngleDegreesY(), plate.height);
        dialog.setLocationRelativeTo(handler.getMainFrame());
        dialog.setVisible(true);

        if (dialog.getReturnValue() == AngleCalculatorDialog.ACCEPTED) {
            float angle = dialog.getAngle();
            float max = 80.0f;
            float min = -80.0f;
            if (angle > max) {
                angle = max;
            } else if (angle < min) {
                angle = min;
            }

            jtfAngleYEnabled.value = false;
            jtfAngleY.setText(String.valueOf(angle));
            jtfAngleYEnabled.value = true;

            if (angle != 0.0f) {
                jtfAngleXEnabled.value = false;
                jtfAngleX.setText(String.valueOf(0.0f));
                jtfAngleXEnabled.value = true;
            }

            bdhcHandler.getSelectedPlate().setAngleY((float) ((angle / 180.0f) * Math.PI));

            updateViewAngles();
            updateViewSlopes();
            updateViewType();
            bdhcDisplay.repaint();
        }
    }//GEN-LAST:event_angleDisplay2MousePressed

    private void displayContainerComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_displayContainerComponentResized
        int size = Math.min(displayContainer.getWidth(), displayContainer.getHeight());
        bdhcDisplay.setPreferredSize(new Dimension(size, size));
        displayContainer.revalidate();
    }//GEN-LAST:event_displayContainerComponentResized

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BdhcEditorDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BdhcEditorDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BdhcEditorDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BdhcEditorDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                BdhcEditorDialog dialog = new BdhcEditorDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private AngleDisplay angleDisplay1;
    private AngleDisplay angleDisplay2;
    private BdhcDisplay bdhcDisplay;
    private javax.swing.JPanel displayContainer;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbAddPlate;
    private javax.swing.JButton jbApplyAngleX;
    private javax.swing.JButton jbApplyAngleY;
    private javax.swing.JButton jbCoordinateZ;
    private javax.swing.JButton jbRemovePlate;
    private javax.swing.JComboBox<String> jcbType;
    private JTextField jtfAngleX;
    private JTextField jtfAngleY;
    private JTextField jtfCoordZ;
    private javax.swing.JList<String> plateList;
    // End of variables declaration//GEN-END:variables

    public void init(MapEditorHandler handler, BufferedImage mapImage) {
        this.handler = handler;
        this.bdhcHandler = new BdhcHandler(this);
        bdhcHandler.init(handler);
        bdhcDisplay.init(handler, mapImage, bdhcHandler);
        angleDisplay1.init(bdhcHandler, 0, 1, true);
        angleDisplay2.init(bdhcHandler, 2, 1, false);

        updateView();
    }

    public void openBdhcWithDialog() {
        final JFileChooser fc = new JFileChooser();
        if (handler.getLastBdhcDirectoryUsed() != null) {
            fc.setCurrentDirectory(new File(handler.getLastBdhcDirectoryUsed()));
        }
        fc.setFileFilter(new FileNameExtensionFilter("Terrain File (*.bdhc)", Bdhc.fileExtension));
        fc.setApproveButtonText("Open");
        fc.setDialogTitle("Open");
        int returnVal = fc.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            try {
                String path = fc.getSelectedFile().getPath();
                handler.setLastBdhcDirectoryUsed(fc.getSelectedFile().getParent());

                int game = handler.getGameIndex();
                if (game == Game.DIAMOND || game == Game.PEARL) {
                    handler.setBdhc(new BdhcLoaderDP().loadBdhcFromFile(path));
                } else {
                    handler.setBdhc(new BdhcLoaderHGSS().loadBdhcFromFile(path));
                }

                bdhcHandler.setSelectedPlate(0);
                updateView();
                bdhcDisplay.repaint();

            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "Can't open file", "Error opening BDHC file", JOptionPane.ERROR_MESSAGE);
            }

        }
    }

    public void saveBdhcWithDialog() {
        final JFileChooser fc = new JFileChooser();
        if (handler.getLastBdhcDirectoryUsed() != null) {
            fc.setCurrentDirectory(new File(handler.getLastBdhcDirectoryUsed()));
        }
        fc.setFileFilter(new FileNameExtensionFilter("Terrain File (*.bdhc)", Bdhc.fileExtension));
        fc.setApproveButtonText("Save");
        fc.setDialogTitle("Save");
        int returnVal = fc.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            try {
                String path = fc.getSelectedFile().getPath();
                handler.setLastBdhcDirectoryUsed(fc.getSelectedFile().getParent());
                path = Utils.addExtensionToPath(path, Bdhc.fileExtension);

                int game = handler.getGameIndex();
                if (game == Game.DIAMOND || game == Game.PEARL) {
                    BdhcWriterDP.writeBdhc(bdhcHandler.getBdhc(), path);
                } else {
                    BdhcWriterHGSS.writeBdhc(bdhcHandler.getBdhc(), path);
                }
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "Can't save file", "Error saving BDHC", JOptionPane.INFORMATION_MESSAGE);
            }

        }
    }

    public void updateView() {
        Plate p = bdhcHandler.getSelectedPlate();
        updateViewJTextField(jtfCoordZ, p.z, jtfCoordZEnabled);
        updateViewPlateNames();
        updateViewType();
        updateViewSlopes();
        updateViewAngles();
    }

    public void updateViewAngles() {
        DecimalFormat df = new DecimalFormat();
        df.setMaximumFractionDigits(5);
        jtfAngleXEnabled.value = false;
        jtfAngleX.setText(df.format(bdhcHandler.getSelectedPlate().getAngleDegreesX()) + "º");
        jtfAngleXEnabled.value = true;
        jtfAngleYEnabled.value = false;
        jtfAngleY.setText(df.format(bdhcHandler.getSelectedPlate().getAngleDegreesY()) + "º");
        jtfAngleYEnabled.value = true;
    }

    public String removeCharAtEnd(String s, String c) {
        if (s.endsWith(c)) {
            return s.substring(0, s.length() - 1);
        }
        return s;
    }

    public String addCharAtEnd(String s, String c) {
        if (!s.endsWith(c)) {
            return s + c;
        }
        return s;
    }

    public void updateViewSlopes() {
        //jtfSlopeX.setText(String.valueOf(bdhcHandler.getSelectedPlate().getSlope()[0]));
        //jtfSlopeY.setText(String.valueOf(bdhcHandler.getSelectedPlate().getSlope()[2]));
        //jtfSlopeZ.setText(String.valueOf(bdhcHandler.getSelectedPlate().getSlope()[1]));

        angleDisplay1.repaint();
        angleDisplay2.repaint();
    }

    public void updateViewType() {
        jcbTypeEnabled = false;
        jcbType.setSelectedIndex(bdhcHandler.getSelectedPlate().type);
        jcbTypeEnabled = true;
    }

    private void updateViewJTextField(JTextField jtf, float value, MutableBoolean enabled) {
        enabled.value = false;
        jtf.setText(String.valueOf(value));
        jtf.setBackground(whiteColor);
        enabled.value = true;
    }

    private void updateViewPlateNames() {
        plateListEnabled = false;
        DefaultListModel demoList = new DefaultListModel();
        for (int i = 0; i < bdhcHandler.getPlates().size(); i++) {
            String name = "Plate " + i;
            demoList.addElement(name);
        }
        plateList.setModel(demoList);
        plateList.setSelectedIndex(bdhcHandler.getSelectedPlateIndex());
        plateListEnabled = true;
    }

    public void changeCoordZ() {
        bdhcHandler.getSelectedPlate().z = getValueFromJTextField(
                jtfCoordZ, bdhcHandler.getSelectedPlate().z, jtfCoordZEnabled);
    }

    public int getValueFromJTextField(JTextField jtf, int defaultValue, MutableBoolean enabled) {
        int value;
        try {
            value = Integer.valueOf(jtf.getText());
            int max = 4096;
            int min = -4096;
            if (value > max) {
                value = max;
            } else if (value < min) {
                value = min;
            }
        } catch (NumberFormatException e) {
            value = defaultValue;
        }
        jtf.setText(String.valueOf(value));
        enabled.value = false;
        jtf.setBackground(greenColor);
        enabled.value = true;

        return value;
    }

    public float getValueFromJTextField(JTextField jtf, float defaultValue, MutableBoolean enabled) {
        float value;
        try {
            value = Float.valueOf(jtf.getText());
        } catch (NumberFormatException e) {
            value = defaultValue;
        }
        jtf.setText(String.valueOf(value));
        enabled.value = false;
        jtf.setBackground(greenColor);
        enabled.value = true;

        return value;
    }

    private void addListenerToJTextField(JTextField jtf, MutableBoolean enabled) {
        jtf.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                changeBackground();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                changeBackground();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                changeBackground();
            }

            public void changeBackground() {
                if (enabled.value) {
                    jtf.setBackground(redColor);
                }
            }
        });
    }

    private class MutableBoolean {

        public boolean value;

        public MutableBoolean(boolean value) {
            this.value = value;
        }

    }

    ;

}
